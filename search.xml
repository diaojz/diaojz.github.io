<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[读书笔记之程序员进阶攻略]]></title>
    <url>%2F2019%2F08%2F21%2FReading-Notes-of-Coder-Advanced-Guide%2F</url>
    <content type="text"><![CDATA[最近在读程序员进阶攻略这本书，做点笔记，供自己回看。不断完善中。。。 05架构与实现：它们的连接与分界？什么是架构 从建筑学来，在计算机工程中，架构师描述功能、组织和计算机系统实现的一组规则与方法。 共同认知 软件系统的结构与行为设计。 架构关注：==《熵》==建立《边界》和《要塞》实现关注：==《简》==建立《领地》 纬度 高维度：指系统、子系统或服务之间的切分与交互结构。 中维度：指系统、服务内部模块的切分与交互结构。 低维度：指模块组成的代码结构、数据结构、库表结构等。 架构师职责 确定边界：划定问题域、系统域的边界。 切分协作：切分系统和服务，目的是建立分工与协作，并行以获得效率。 连接交互：在切分的各部分之间建立连接交互的原则和机制。 组装整合：把切分的各部分按预期定义的规则和方法组装整合为一体，完成系统目标。 你以为的架构师交付：一种架构（文档）文档只是载体。 实际上：==一整套决策流==，文档仅仅是交付载体（过程产物），最终体现在线上系统的运行结构中。 架构师需要考虑的方面 选型评估 程序设计 逻辑：即功能的业务逻辑，反映了真实业务场景流程与分支，包含大量业务领域知识。 控制：即考虑业务逻辑的执行策略，哪些可以并行执行，哪些可以异步执行，哪些地方又必须同步等待结果并串行执行？ 数据：包括数据结构、数据状态变化和存取方式。 执行效率 稳定健壮 维护运维 集成部署 其他需要考虑 你进一步要考虑代码的执行效率，需要运行多长时间？ 要求的最大等待响应时间能否满足？ 并发吞吐能力如何？ 运行的稳定性和各种边界条件、异常处理是否考虑到了？ 上线后，出现Bug，相关的监控、日志能否帮助快速定位？ 是否有动态线上配置和变更能力，可以快速修复一些问题？ 新上线版本时，你的程序是否考虑了兼容老版本的问题等？ 最后你开发的代码是以什么形态交付？ 如果是提供一个程序库，则需要考虑相关的依赖复杂度和使用便利性，以及未来的升级管理。 如果是提供服务，就需要考虑服务调用的管理、服务使用的统计监控，以及相关的SLA服务保障承诺。 断裂带 架构和实现之间的鸿沟。因为决策是静态的，实现是动态的。 解决方案：采用定期对系统状态做==快照==。原则：关注战略性细节，只要没有越出==顶层宏观结构定义边界==即可。桥梁：在鸿沟上建设，即==战略要地==。 原因 沟通问题：如信息传递障碍。 水平问题：如技术能力不足。 态度问题：如偷懒走捷径。 现实问题：如无法变更的截止日期（Deadline）。 06模式与框架：它们的关系与误区？设计模式 设计复用 开发框架 代码复用越是通用的框架，意味着抽象度更高。而现实是越抽象，越难理解。 关系 框架是程序代码，模式是关于这些代码的知识。 总结 都是前人总结的经验 模式是代码层面，解决单个问题的成功方法。 框架是设计层面，解决一系列问题的成功方法。 07多维与视图：系统设计的思考维度与展现视图语言UML组成视图 子系统 服务 组件 划分原则 单一化：每个服务提供单一内聚的功能集。 正交化：任何一个功能仅由一个服务提供。没有类似功能的服务。 交互视图 定义：与外部系统的协作关系，即依赖于被依赖。重点:聚焦。局部细节交互图 部署视图 系统的部署结构和环境 主机环境 网络结构 环境元素依赖 上图:强调的是应用部署的IDC和网络的关系。关键的网络通讯延时指标。 总结 以上三类图（交互、组成、部署图）表达的是==宏观视图==关注系统组合、协作和依存关系。 流程视图（UML中的序列图） 表达系统内部实现的功能和控制逻辑流程。业务和控制。 状态视图 表达系统内部管理了哪些==状态==及状态的变迁==转移路径==。]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用markdown语法绘制甘特图]]></title>
    <url>%2F2019%2F07%2F29%2FHow-to-use-the-markdown-grammar-draw-a-gantt-chart%2F</url>
    <content type="text"><![CDATA[最近在项目中遇到需要绘制甘特图，使用了Excel绘制后，感觉并不顺手，不符合程序员的思维，于是搜索一番之后发现了更优雅的方式。 甘特图原理基本是一条线条图，横轴表示时间，纵轴表示活动(项目)，线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。 步骤一首先打开在浏览器打开地址 Cmd Markdown 编辑阅读器 此编辑器支持绘制甘特图 步骤二粘贴以下代码，修改项目中对应标题、日期、时间等。具体语法很简单，看如下示例： 12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2019-07-27, 5d 可行性报告 :after a1, 5d 概念验证 :5dsection 项目实施 概要设计 :2019-08-05, 5d 详细设计 :2019-08-08, 10d 编码 :2019-08-15, 10d 测试 :2019-08-22, 5dsection 发布验收 发布: 2d 验收: 3d 步骤三语法编辑完成之后，右边会自动生成一张甘特图。效果如下： 结束至此，一张漂亮的甘特图绘制完成。 one more 除了有甘特图，此编辑器还可以绘制序列图、流程图、公式等，可以下载编辑器使用，支持全平台下载。 编辑器下载链接]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何发布文章]]></title>
    <url>%2F2019%2F07%2F29%2Fhello-world%2F</url>
    <content type="text"><![CDATA[新建一篇文章 在hexo博客目录下，输入命令行 1hexo new "博客文章名字，最好是英文，方便生成链接路径" 本地运行服务，看效果123hexo server# 或者hexo s 一键发布到网站1234# 清理 &amp;&amp; 生成静态文件 &amp;&amp; 部署远程网站hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy# 或者hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 官网地址: 官网中文]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
</search>
